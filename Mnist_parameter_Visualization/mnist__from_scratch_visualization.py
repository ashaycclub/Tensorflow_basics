# -*- coding: utf-8 -*-
"""Mnist _from_Scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJ3AToD8A3CwB3ytJkx-VYl5iT2K6equ
"""

import tensorflow as tf

from tensorflow.examples.tutorials.mnist import input_data


mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

n_train = mnist.train.num_examples  # 55,000
n_validation = mnist.validation.num_examples  # 5000
n_test = mnist.test.num_examples  # 10,000

n_input = 784  # input layer (28x28 pixels)
n_hidden1 = 512  # 1st hidden layer
n_hidden2 = 256  # 2nd hidden layer
n_hidden3 = 128  # 3rd hidden layer
n_output = 10  # output layer (0-9 digits)

learning_rate = 1e-4
n_iterations = 1000
batch_size = 128
dropout = 0.5

X = tf.placeholder("float", [None, n_input])
Y = tf.placeholder("float", [None, n_output])
keep_prob = tf.placeholder(tf.float32)
rate=1-keep_prob

weights = {
    'w1': tf.Variable(tf.truncated_normal([n_input, n_hidden1], stddev=0.1)),
    'w2': tf.Variable(tf.truncated_normal([n_hidden1, n_hidden2], stddev=0.1)),
    'w3': tf.Variable(tf.truncated_normal([n_hidden2, n_hidden3], stddev=0.1)),
    'out': tf.Variable(tf.truncated_normal([n_hidden3, n_output], stddev=0.1)),
}

biases = {
    'b1': tf.Variable(tf.constant(0.1, shape=[n_hidden1])),
    'b2': tf.Variable(tf.constant(0.1, shape=[n_hidden2])),
    'b3': tf.Variable(tf.constant(0.1, shape=[n_hidden3])),
    'out': tf.Variable(tf.constant(0.1, shape=[n_output]))
}

with tf.name_scope ("Network_Model") as scope:
    layer_1 = tf.add(tf.matmul(X, weights['w1']), biases['b1'])
    layer_2 = tf.add(tf.matmul(layer_1, weights['w2']), biases['b2'])
    layer_3 = tf.add(tf.matmul(layer_2, weights['w3']), biases['b3'])
    layer_drop = tf.nn.dropout(layer_3, rate)
    output_layer = tf.matmul(layer_3, weights['out']) + biases['out']

#Summary report for Weights
w1_histogram = tf.summary.histogram("w_1",weights["w1"])
w2_histogram = tf.summary.histogram("w_2",weights["w2"])
w3_histogram = tf.summary.histogram("w_3",weights["w3"])
w4_histogram = tf.summary.histogram("out",weights["out"])

#Summary report for BIas
w1_histogram = tf.summary.histogram("B_1",biases["b1"])
w2_histogram = tf.summary.histogram("B_2",biases["b2"])
w3_histogram = tf.summary.histogram("B_3",biases["b3"])
w4_histogram = tf.summary.histogram("out",biases["out"])

with tf.name_scope ("cost_Function") as scope:
    cross_entropy = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(
            labels=Y, logits=output_layer

        ))
with tf.name_scope ("optimizer") as scope:    
    train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

with tf.name_scope ("network_prediction") as scope:
    correct_pred = tf.equal(tf.argmax(output_layer, 1), tf.argmax(Y, 1))
with tf.name_scope ("network_accuracy") as scope:
    accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))

init = tf.global_variables_initializer()

# Merge all summaries
merged_summary=tf.summary.merge_all()


saver=tf.train.Saver()
sess = tf.Session()

sess.run(init)

with tf.Session() as sess:
    sess.run(init)
    writer=tf.summary.FileWriter('./log',sess.graph)
    
# train on mini batches
    for i in range(100):
        batch_x, batch_y = mnist.train.next_batch(batch_size)
        sess.run(train_step, feed_dict={X: batch_x, Y: batch_y, rate: dropout})

        summary_epoch=sess.run(merged_summary ,feed_dict={X:batch_x,Y:batch_y, rate:dropout })
        writer.add_summary(summary_epoch,i)
        # print loss and accuracy (per minibatch)
        if i % 100 == 0:
            minibatch_loss, minibatch_accuracy = sess.run( [cross_entropy, accuracy],feed_dict={X: batch_x, Y: batch_y, keep_prob: 1.0}            )
            print("Iteration",str(i),"\t| Loss =",str(minibatch_loss),"\t| Accuracy =",str(minibatch_accuracy))
        test_accuracy = sess.run(accuracy, feed_dict={X: mnist.test.images, Y: mnist.test.labels, keep_prob: 1.0})
        print("\nAccuracy on test set:", test_accuracy)    
        save_path=saver.save(sess,"./model/my_model.ckpt")

